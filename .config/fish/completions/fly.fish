complete -c fly -n __fish_use_subcommand -a "help" -d "Print this help message"
complete -c fly -d "Concourse target name" --l "target" -s "t"
complete -c fly -n __fish_use_subcommand -a "targets" -d "List saved targets (alias: ts)"
complete -c fly -n __fish_use_subcommand -a "delete-target" -d "Delete target (alias: dtg)"
complete -c fly -n "__fish_seen_subcommand_from  delete-target" -d "Delete all targets" --l "all" -s "a"
complete -c fly -n __fish_use_subcommand -a "edit-target" -d "Edit a target (alias: etg)"
complete -c fly -n "__fish_seen_subcommand_from  edit-target" -d "Update target name" --l "target-name"
complete -c fly -n "__fish_seen_subcommand_from  edit-target" -d "Update concourse URL" --l "concourse-url" -s "u"
complete -c fly -n "__fish_seen_subcommand_from  edit-target" -d "Update team name" --l "team-name" -s "n"
complete -c fly -d "Print the version of Fly and exit" --l "version" -s "v"
complete -c fly -d "Print API requests and responses" --l "verbose"
complete -c fly -d "Print table headers even for redirected output" --l "print-table-headers"
complete -c fly -n __fish_use_subcommand -a "login" -d "Authenticate with the target (alias: l)"
complete -c fly -n "__fish_seen_subcommand_from  login" -d "Concourse URL to authenticate with" --l "concourse-url" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  login" -d "Skip verification of the endpoint's SSL certificate" --l "insecure" -s "k"
complete -c fly -n "__fish_seen_subcommand_from  login" -d "Username for basic auth" --l "username" -s "u"
complete -c fly -n "__fish_seen_subcommand_from  login" -d "Password for basic auth" --l "password" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  login" -d "Team to authenticate with" --l "team-name" -s "n"
complete -c fly -n "__fish_seen_subcommand_from  login" -d "Path to Concourse PEM-encoded CA certificate file." --l "ca-cert"
complete -c fly -n "__fish_seen_subcommand_from  login" -d "Path to a PEM-encoded client certificate file." --l "client-cert"
complete -c fly -n "__fish_seen_subcommand_from  login" -d "Path to a PEM-encoded client key file." --l "client-key"
complete -c fly -n "__fish_seen_subcommand_from  login" -d "Open browser to the auth endpoint" --l "open-browser" -s "b"
complete -c fly -n "__fish_seen_subcommand_from  login"
complete -c fly -n __fish_use_subcommand -a "logout" -d "Release authentication with the target (alias: o)"
complete -c fly -n "__fish_seen_subcommand_from  logout" -d "Logout of all targets" --l "all" -s "a"
complete -c fly -n __fish_use_subcommand -a "status" -d "Login status"
complete -c fly -n __fish_use_subcommand -a "sync" -d "Download and replace the current fly from the target (alias: s)"
complete -c fly -n "__fish_seen_subcommand_from  sync" -d "Sync even if versions already match." --l "force" -s "f"
complete -c fly -n "__fish_seen_subcommand_from  sync" -d "Concourse URL to sync with" --l "concourse-url" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  sync" -d "Skip verification of the endpoint's SSL certificate" --l "insecure" -s "k"
complete -c fly -n "__fish_seen_subcommand_from  sync" -d "Path to Concourse PEM-encoded CA certificate file." --l "ca-cert"
complete -c fly -n "__fish_seen_subcommand_from  sync" -d "Path to a PEM-encoded client certificate file." --l "client-cert"
complete -c fly -n "__fish_seen_subcommand_from  sync" -d "Path to a PEM-encoded client key file." --l "client-key"
complete -c fly -n __fish_use_subcommand -a "active-users" -d "List the active users since a date or for the past 2 months (alias: au)"
complete -c fly -n "__fish_seen_subcommand_from  active-users" -d "Start date range of returned users' last login, defaults to 2 months from today'" --l "since"
complete -c fly -n "__fish_seen_subcommand_from  active-users" -d "Print command result as JSON" --l "json"
complete -c fly -n __fish_use_subcommand -a "userinfo" -d "User information"
complete -c fly -n "__fish_seen_subcommand_from  userinfo" -d "Print command result as JSON" --l "json"
complete -c fly -n __fish_use_subcommand -a "teams" -d "List the configured teams (alias: t)"
complete -c fly -n "__fish_seen_subcommand_from  teams" -d "Print command result as JSON" --l "json"
complete -c fly -n "__fish_seen_subcommand_from  teams" -d "Print authentication configuration" --l "details" -s "d"
complete -c fly -n __fish_use_subcommand -a "get-team" -d "Show team configuration (alias: gt)"
complete -c fly -n "__fish_seen_subcommand_from  get-team" -d "Get configuration of this team" --l "team-name" -s "n"
complete -c fly -n "__fish_seen_subcommand_from  get-team" -d "Print command result as JSON" --l "json" -s "j"
complete -c fly -n __fish_use_subcommand -a "set-team" -d "Create or modify a team to have the given credentials (alias: st)"
complete -c fly -n "__fish_seen_subcommand_from  set-team" -d "The team to create or modify" --l "team-name" -s "n"
complete -c fly -n "__fish_seen_subcommand_from  set-team" -d "Force apply configuration" --l "non-interactive"
complete -c fly -n "__fish_seen_subcommand_from  set-team"
complete -c fly -n __fish_use_subcommand -a "rename-team" -d "Rename a team (alias: rt)"
complete -c fly -n "__fish_seen_subcommand_from  rename-team" -d "Current team name" --l "old-name" -s "o"
complete -c fly -n "__fish_seen_subcommand_from  rename-team" -d "New team name" --l "new-name" -s "n"
complete -c fly -n __fish_use_subcommand -a "destroy-team" -d "Destroy a team and delete all of its data (alias: dt)"
complete -c fly -n "__fish_seen_subcommand_from  destroy-team" -d "The team to delete" --l "team-name" -s "n"
complete -c fly -n "__fish_seen_subcommand_from  destroy-team" -d "Force apply configuration" --l "non-interactive"
complete -c fly -n __fish_use_subcommand -a "checklist" -d "Print a Checkfile of the given pipeline (alias: cl)"
complete -c fly -n "__fish_seen_subcommand_from  checklist" -d "The pipeline from which to generate the Checkfile" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  checklist" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "execute" -d "Execute a one-off build using local bits (alias: e)"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "The task config to execute" --l "config" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "Run the task with full privileges" --l "privileged" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "Including .gitignored paths. Disregards .gitignore entries and uploads everything" --l "include-ignored"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "An input to provide to the task (can be specified multiple times)" --l "input" -s "i"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "Map a resource to a different name as task input" --l "input-mapping" -s "m"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "A job to base the inputs on" --l "inputs-from" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "An output to fetch from the task (can be specified multiple times)" --l "output" -s "o"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "Image resource for the one-off build" --l "image"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "A tag for a specific environment (can be specified multiple times)" --l "tag"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "Specify a string value to set for a variable in the pipeline" --l "var" -s "v"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "Specify a YAML value to set for a variable in the pipeline" --l "yaml-var" -s "y"
complete -c fly -n "__fish_seen_subcommand_from  execute" -d "Variable flag that can be used for filling in template values in configuration from a YAML file" --l "load-vars-from" -s "l"
complete -c fly -n __fish_use_subcommand -a "watch" -d "Stream a build's output (alias: w)"
complete -c fly -n "__fish_seen_subcommand_from  watch" -d "Watches builds of the given job" --l "job" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  watch" -d "Watches a specific build" --l "build" -s "b"
complete -c fly -n "__fish_seen_subcommand_from  watch" -d "URL for the build or job to watch" --l "url" -s "u"
complete -c fly -n "__fish_seen_subcommand_from  watch" -d "Print with local timestamp" --l "timestamps" -s "t"
complete -c fly -n "__fish_seen_subcommand_from  watch" -d "Ignore event parsing errors" --l "ignore-event-parsing-errors"
complete -c fly -n "__fish_seen_subcommand_from  watch" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "containers" -d "Print the active containers (alias: cs)"
complete -c fly -n "__fish_seen_subcommand_from  containers" -d "Print command result as JSON" --l "json"
complete -c fly -n __fish_use_subcommand -a "hijack" -d "Execute a command in a container (alias: intercept)"
complete -c fly -n "__fish_seen_subcommand_from  hijack" -d "Name of a job to hijack" --l "job" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  hijack" -d "Handle id of a job to hijack" --l "handle"
complete -c fly -n "__fish_seen_subcommand_from  hijack" -d "Name of a resource's checking container to hijack" --l "check" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  hijack" -d "URL for the build, job, or check container to hijack" --l "url" -s "u"
complete -c fly -n "__fish_seen_subcommand_from  hijack" -d "Build number within the job, or global build ID" --l "build" -s "b"
complete -c fly -n "__fish_seen_subcommand_from  hijack" -d "Name of step to hijack (e.g. build, unit, resource name)" --l "step" -s "s"
complete -c fly -n "__fish_seen_subcommand_from  hijack" -d "Type of step to hijack (e.g. get, put, task)" --l "step-type"
complete -c fly -n "__fish_seen_subcommand_from  hijack" -d "Attempt number of step to hijack." --l "attempt" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  hijack"
complete -c fly -n "__fish_seen_subcommand_from  hijack" -d "Name of the team to which the container belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "jobs" -d "List the jobs in the pipelines (alias: js)"
complete -c fly -n "__fish_seen_subcommand_from  jobs" -d "Get jobs in this pipeline" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  jobs" -d "Print command result as JSON" --l "json"
complete -c fly -n "__fish_seen_subcommand_from  jobs" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "paused-jobs" -d "List the paused jobs in the pipelines (alias: pjs)"
complete -c fly -n "__fish_seen_subcommand_from  paused-jobs" -d "Get jobs in this pipeline" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  paused-jobs" -d "Print command result as JSON" --l "json"
complete -c fly -n "__fish_seen_subcommand_from  paused-jobs" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "pause-job" -d "Pause a job (alias: pj)"
complete -c fly -n "__fish_seen_subcommand_from  pause-job" -d "Name of a job to pause" --l "job" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  pause-job" -d "Name of the team to which the job belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "unpause-job" -d "Unpause a job (alias: uj)"
complete -c fly -n "__fish_seen_subcommand_from  unpause-job" -d "Name of a job to unpause" --l "job" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  unpause-job" -d "Name of the team to which the job belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "schedule-job" -d "Request the scheduler to run for a job. Introduced as a recovery command for the v6.0 scheduler. (alias: sj)"
complete -c fly -n "__fish_seen_subcommand_from  schedule-job" -d "Name of a job to schedule" --l "job" -s "j"
complete -c fly -n __fish_use_subcommand -a "pipelines" -d "List the configured pipelines (alias: ps)"
complete -c fly -n "__fish_seen_subcommand_from  pipelines" -d "Show pipelines across all teams" --l "all" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  pipelines" -d "Show archived pipelines" --l "include-archived"
complete -c fly -n "__fish_seen_subcommand_from  pipelines" -d "Print command result as JSON" --l "json"
complete -c fly -n __fish_use_subcommand -a "paused-pipelines" -d "List the configured paused pipelines (alias: pps)"
complete -c fly -n "__fish_seen_subcommand_from  paused-pipelines" -d "Show pipelines across all teams" --l "all" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  paused-pipelines" -d "Print command result as JSON" --l "json"
complete -c fly -n __fish_use_subcommand -a "destroy-pipeline" -d "Destroy a pipeline (alias: dp)"
complete -c fly -n "__fish_seen_subcommand_from  destroy-pipeline" -d "Pipeline to destroy" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  destroy-pipeline" -d "Destroy the pipeline without confirmation" --l "non-interactive" -s "n"
complete -c fly -n "__fish_seen_subcommand_from  destroy-pipeline" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "get-pipeline" -d "Get a pipeline's current configuration (alias: gp)"
complete -c fly -n "__fish_seen_subcommand_from  get-pipeline" -d "Get configuration of this pipeline" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  get-pipeline" -d "Print config as json instead of yaml" --l "json" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  get-pipeline" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "set-pipeline" -d "Create or update a pipeline's configuration (alias: sp)"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Skips interactions, uses default values" --l "non-interactive" -s "n"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Disable color output" --l "no-color"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Run a set pipeline step but in dry-run mode" --l "dry-run" -s "d"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Validate credential variables against credential manager" --l "check-creds"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Pipeline to configure" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Pipeline configuration file, "-" stands for stdin" --l "config" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Specify a string value to set for a variable in the pipeline" --l "var" -s "v"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Specify a YAML value to set for a variable in the pipeline" --l "yaml-var" -s "y"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Specify a YAML value to set for an instance variable" --l "instance-var" -s "i"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Variable flag that can be used for filling in template values in configuration from a YAML file" --l "load-vars-from" -s "l"
complete -c fly -n "__fish_seen_subcommand_from  set-pipeline" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "pause-pipeline" -d "Pause a pipeline (alias: pp)"
complete -c fly -n "__fish_seen_subcommand_from  pause-pipeline" -d "Pipeline to pause" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  pause-pipeline" -d "Pause all pipelines" --l "all" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  pause-pipeline" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "archive-pipeline" -d "Archive a pipeline (alias: ap)"
complete -c fly -n "__fish_seen_subcommand_from  archive-pipeline" -d "Pipeline to archive" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  archive-pipeline" -d "Archive all pipelines" --l "all" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  archive-pipeline" -d "Skips interactions, uses default values" --l "non-interactive" -s "n"
complete -c fly -n "__fish_seen_subcommand_from  archive-pipeline" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "unpause-pipeline" -d "Un-pause a pipeline (alias: up)"
complete -c fly -n "__fish_seen_subcommand_from  unpause-pipeline" -d "Pipeline to unpause" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  unpause-pipeline" -d "Unpause all pipelines" --l "all" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  unpause-pipeline" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "expose-pipeline" -d "Make a pipeline publicly viewable (alias: ep)"
complete -c fly -n "__fish_seen_subcommand_from  expose-pipeline" -d "Pipeline to expose" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  expose-pipeline" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "hide-pipeline" -d "Hide a pipeline from the public (alias: hp)"
complete -c fly -n "__fish_seen_subcommand_from  hide-pipeline" -d "Pipeline to hide" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  hide-pipeline" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "rename-pipeline" -d "Rename a pipeline (alias: rp)"
complete -c fly -n "__fish_seen_subcommand_from  rename-pipeline" -d "Existing pipeline or instance group to rename" --l "old-name" -s "o"
complete -c fly -n "__fish_seen_subcommand_from  rename-pipeline" -d "New name for the pipeline or instance group" --l "new-name" -s "n"
complete -c fly -n __fish_use_subcommand -a "validate-pipeline" -d "Validate a pipeline config (alias: vp)"
complete -c fly -n "__fish_seen_subcommand_from  validate-pipeline" -d "Pipeline configuration file" --l "config" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  validate-pipeline" -d "Fail on warnings" --l "strict" -s "s"
complete -c fly -n "__fish_seen_subcommand_from  validate-pipeline" -d "Output templated pipeline to stdout" --l "output" -s "o"
complete -c fly -n "__fish_seen_subcommand_from  validate-pipeline" -d "Enable the experimental across step to be used in jobs. The API is subject to change." --l "enable-across-step"
complete -c fly -n "__fish_seen_subcommand_from  validate-pipeline" -d "Specify a string value to set for a variable in the pipeline" --l "var" -s "v"
complete -c fly -n "__fish_seen_subcommand_from  validate-pipeline" -d "Specify a YAML value to set for a variable in the pipeline" --l "yaml-var" -s "y"
complete -c fly -n "__fish_seen_subcommand_from  validate-pipeline" -d "Variable flag that can be used for filling in template values in configuration from a YAML file" --l "load-vars-from" -s "l"
complete -c fly -n __fish_use_subcommand -a "format-pipeline" -d "Format a pipeline config (alias: fp)"
complete -c fly -n "__fish_seen_subcommand_from  format-pipeline" -d "Pipeline configuration file" --l "config" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  format-pipeline" -d "Do not print to stdout; overwrite the file in place" --l "write" -s "w"
complete -c fly -n __fish_use_subcommand -a "order-pipelines" -d "Orders pipelines (alias: op)"
complete -c fly -n "__fish_seen_subcommand_from  order-pipelines" -d "Order all pipelines alphabetically" --l "alphabetical" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  order-pipelines" -d "Name of pipeline (can be specified multiple times to provide relative ordering)" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  order-pipelines" -d "Name of the team to which the pipelines belong, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "order-instanced-pipelines" -d "Orders instanced pipelines within an instance group (alias: oip)"
complete -c fly -n "__fish_seen_subcommand_from  order-instanced-pipelines" -d "Name of the instance group" --l "group" -s "g"
complete -c fly -n "__fish_seen_subcommand_from  order-instanced-pipelines" -d "Instance vars identifying pipeline (can be specified multiple times to provide relative ordering)" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  order-instanced-pipelines" -d "Name of the team to which the pipelines belong, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "resources" -d "List the resources in the pipeline (alias: rs)"
complete -c fly -n "__fish_seen_subcommand_from  resources" -d "Get resources in this pipeline" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  resources" -d "Print command result as JSON" --l "json"
complete -c fly -n "__fish_seen_subcommand_from  resources" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "resource-versions" -d "List the versions of a resource (alias: rvs)"
complete -c fly -n "__fish_seen_subcommand_from  resource-versions" -d "Number of versions you want to limit the return to" --l "count" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  resource-versions" -d "Name of a resource to get versions for" --l "resource" -s "r"
complete -c fly -n "__fish_seen_subcommand_from  resource-versions" -d "Print command result as JSON" --l "json"
complete -c fly -n "__fish_seen_subcommand_from  resource-versions" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "check-resource" -d "Check a resource (alias: cr)"
complete -c fly -n "__fish_seen_subcommand_from  check-resource" -d "Name of a resource to check version for" --l "resource" -s "r"
complete -c fly -n "__fish_seen_subcommand_from  check-resource" -d "Version of the resource to check from, e.g. ref:abcd or path:thing-1.2.3.tgz" --l "from" -s "f"
complete -c fly -n "__fish_seen_subcommand_from  check-resource" -d "Return the check without waiting for its result" --l "async" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  check-resource" -d "Check the resource itself only" --l "shallow"
complete -c fly -n "__fish_seen_subcommand_from  check-resource" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "pin-resource" -d "Pin a version to a resource (alias: pr)"
complete -c fly -n "__fish_seen_subcommand_from  pin-resource" -d "Name of the resource" --l "resource" -s "r"
complete -c fly -n "__fish_seen_subcommand_from  pin-resource" -d "Version of the resource to pin. The given key value pair(s) has to be an exact match but not all fields are needed. In the case of multiple resource versions matched, it will pin the latest one." --l "version" -s "v"
complete -c fly -n "__fish_seen_subcommand_from  pin-resource" -d "Message to be saved to the pinned resource. Resource has to be pinned otherwise --version should be specified to pin the resource first." --l "comment" -s "c"
complete -c fly -n __fish_use_subcommand -a "unpin-resource" -d "Unpin a resource (alias: ur)"
complete -c fly -n "__fish_seen_subcommand_from  unpin-resource" -d "Name of the resource" --l "resource" -s "r"
complete -c fly -n __fish_use_subcommand -a "enable-resource-version" -d "Enable a version of a resource (alias: erv)"
complete -c fly -n "__fish_seen_subcommand_from  enable-resource-version" -d "Name of the resource" --l "resource" -s "r"
complete -c fly -n "__fish_seen_subcommand_from  enable-resource-version" -d "Version of the resource to enable. The given key value pair(s) has to be an exact match but not all fields are needed. In the case of multiple resource versions matched, it will enable the latest one." --l "version" -s "v"
complete -c fly -n __fish_use_subcommand -a "disable-resource-version" -d "Disable a version of a resource (alias: drv)"
complete -c fly -n "__fish_seen_subcommand_from  disable-resource-version" -d "Name of the resource" --l "resource" -s "r"
complete -c fly -n "__fish_seen_subcommand_from  disable-resource-version" -d "Version of the resource to disable. The given key value pair(s) has to be an exact match but not all fields are needed. In the case of multiple resource versions matched, it will disable the latest one." --l "version" -s "v"
complete -c fly -n __fish_use_subcommand -a "clear-resource-cache" -d "Clear cache of a resource (alias: crc)"
complete -c fly -n "__fish_seen_subcommand_from  clear-resource-cache" -d "Name of a resource to clear cache" --l "resource" -s "r"
complete -c fly -n "__fish_seen_subcommand_from  clear-resource-cache" -d "Version of the resource to check from, e.g. digest:sha256@..., in case a version is not specified the command will delete all the resource caches for that resource" --l "version" -s "v"
complete -c fly -n __fish_use_subcommand -a "clear-versions" -d "Clear versions of a resource or resource type (alias: cv)"
complete -c fly -n "__fish_seen_subcommand_from  clear-versions" -d "Name of a resource to clear versions" --l "resource"
complete -c fly -n "__fish_seen_subcommand_from  clear-versions" -d "Name of a resource type to clear versions" --l "resource-type"
complete -c fly -n __fish_use_subcommand -a "check-resource-type" -d "Check a resource-type (alias: crt)"
complete -c fly -n "__fish_seen_subcommand_from  check-resource-type" -d "Name of a resource-type to check" --l "resource-type" -s "r"
complete -c fly -n "__fish_seen_subcommand_from  check-resource-type" -d "Version of the resource type to check from, e.g. digest:sha256@..." --l "from" -s "f"
complete -c fly -n "__fish_seen_subcommand_from  check-resource-type" -d "Return the check without waiting for its result" --l "async" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  check-resource-type" -d "Check the resource type itself only" --l "shallow"
complete -c fly -n "__fish_seen_subcommand_from  check-resource-type" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "clear-task-cache" -d "Clears cache from a task container (alias: ctc)"
complete -c fly -n "__fish_seen_subcommand_from  clear-task-cache" -d "Job to clear cache from" --l "job" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  clear-task-cache" -d "Step name to clear cache from" --l "step" -s "s"
complete -c fly -n "__fish_seen_subcommand_from  clear-task-cache" -d "Cache directory to clear out" --l "cache-path" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  clear-task-cache" -d "Destroy the task cache(s) without confirmation" --l "non-interactive" -s "n"
complete -c fly -n __fish_use_subcommand -a "builds" -d "List builds data (alias: bs)"
complete -c fly -n "__fish_seen_subcommand_from  builds" -d "Show builds for the all teams that user has access to" --l "all-teams" -s "a"
complete -c fly -n "__fish_seen_subcommand_from  builds" -d "Number of builds you want to limit the return to" --l "count" -s "c"
complete -c fly -n "__fish_seen_subcommand_from  builds" -d "Show builds for the currently targeted team" --l "current-team"
complete -c fly -n "__fish_seen_subcommand_from  builds" -d "Name of a job to get builds for" --l "job" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  builds" -d "Print command result as JSON" --l "json"
complete -c fly -n "__fish_seen_subcommand_from  builds" -d "Name of a pipeline to get builds for" --l "pipeline" -s "p"
complete -c fly -n "__fish_seen_subcommand_from  builds" -d "Show builds for these teams" --l "team" -s "n"
complete -c fly -n "__fish_seen_subcommand_from  builds" -d "Start of the range to filter builds" --l "since"
complete -c fly -n "__fish_seen_subcommand_from  builds" -d "End of the range to filter builds" --l "until"
complete -c fly -n __fish_use_subcommand -a "abort-build" -d "Abort a build (alias: ab)"
complete -c fly -n "__fish_seen_subcommand_from  abort-build" -d "Name of a job to cancel" --l "job" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  abort-build" -d "If job is specified: build number to cancel. If job not specified: build id" --l "build" -s "b"
complete -c fly -n "__fish_seen_subcommand_from  abort-build" -d "Name of the team to which the pipeline belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "rerun-build" -d "Rerun a build (alias: rb)"
complete -c fly -n "__fish_seen_subcommand_from  rerun-build" -d "Name of the job that you want to rerun a build for" --l "job" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  rerun-build" -d "The number of the build to rerun" --l "build" -s "b"
complete -c fly -n "__fish_seen_subcommand_from  rerun-build" -d "Start watching the rerun build output" --l "watch" -s "w"
complete -c fly -n __fish_use_subcommand -a "trigger-job" -d "Start a job in a pipeline (alias: tj)"
complete -c fly -n "__fish_seen_subcommand_from  trigger-job" -d "Name of a job to trigger" --l "job" -s "j"
complete -c fly -n "__fish_seen_subcommand_from  trigger-job" -d "Start watching the build output" --l "watch" -s "w"
complete -c fly -n "__fish_seen_subcommand_from  trigger-job" -d "Name of the team to which the job belongs, if different from the target default" --l "team"
complete -c fly -n __fish_use_subcommand -a "volumes" -d "List the active volumes (alias: vs)"
complete -c fly -n "__fish_seen_subcommand_from  volumes" -d "Print additional information for each volume" --l "details" -s "d"
complete -c fly -n "__fish_seen_subcommand_from  volumes" -d "Print command result as JSON" --l "json"
complete -c fly -n __fish_use_subcommand -a "workers" -d "List the registered workers (alias: ws)"
complete -c fly -n "__fish_seen_subcommand_from  workers" -d "Print additional information for each worker" --l "details" -s "d"
complete -c fly -n "__fish_seen_subcommand_from  workers" -d "Print command result as JSON" --l "json"
complete -c fly -n __fish_use_subcommand -a "land-worker" -d "Land a worker (alias: lw)"
complete -c fly -n "__fish_seen_subcommand_from  land-worker" -d "Worker to land" --l "worker" -s "w"
complete -c fly -n __fish_use_subcommand -a "prune-worker" -d "Prune a stalled, landing, landed, or retiring worker (alias: pw)"
complete -c fly -n "__fish_seen_subcommand_from  prune-worker" -d "Worker to prune" --l "worker" -s "w"
complete -c fly -n "__fish_seen_subcommand_from  prune-worker" -d "Prune all stalled workers" --l "all-stalled" -s "a"
complete -c fly -n __fish_use_subcommand -a "curl" -d "curl the api (alias: c)"
complete -c fly -n "__fish_seen_subcommand_from  curl"
complete -c fly -n "__fish_seen_subcommand_from  curl" -d "Print curl command and exit" --l "print-and-exit"
complete -c fly -n __fish_use_subcommand -a "completion" -d "generate shell completion code"
complete -c fly -n "__fish_seen_subcommand_from  completion" --l "shell"
