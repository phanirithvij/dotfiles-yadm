# cmd tmux_micro_edit ${{
	# $micro "$f"
# }}
# set nopreview
# set ratios 1
# set info size:time

# set drawbox

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# https://sourcegraph.com/github.com/lmburns/dotfiles/-/blob/.config/lf/lfrc?subtree=true
# == Tagging == [[[
map <c-_> mark-save

map ; push :tag<space>
map Tj jump_tag
map X tag-toggle

map Tms tmsu-set
map Tmr tmsu-remove
map Tml tmsu-list

map Ts wutag-set
map Ta wutag-add
map Tr wutag-remove
map Tl wutag-list
# ]]]

# === TAGS === [[[
# -- Tag: tmsu set
cmd tmsu-set ${{
  zmodload -Fa zsh/zle b:vared
  clear
  print -nPr "%F{2}"
  print -f "%s" "$(figlet tmsu)"
  print -Pr "%f"
  printf "=%.0s" {1..22}
  print
  vared -cp "Set tag: " tmsu_tag
  tmsu tag --tags="$tmsu_tag" $fx
}}

# -- Tag: tmsu list specific file
cmd tmsu-remove ${{
  zmodload -Fa zsh/zle b:vared
  clear
  print -nPr "%F{2}"
  print -f "%s" "$(figlet tmsu)"
  print -Pr "%f"
  printf "=%.0s" {1..22}
  print
  vared -cp "Remove tag: " tmsu_tag
  tmsu untag --tags="$tmsu_tag" $fx
}}

# -- Tag: tmsu remove
cmd tmsu-list !{{
  clear
  tmsu tags "$fx" | bat -l bash --paging=always
}}

# -- Tag: wutag set
cmd wutag-set ${{
  zmodload -Fa zsh/zle b:vared
  clear
  print -nPr "%F{2}"
  print -f "%s" "$(figlet wutag)"
  print -Pr "%f"
  printf "=%.0s" {1..22}
  print
  vared -cp "Set tag: " tag
  for x in $fx; do
    fname="${x:t}"; fdir="${x:h}"
    wutag -d "${fdir}/" set -c $fname $tag
  done
}}

# -- Tag: wutag add
cmd wutag-add ${{
  zmodload -Fa zsh/zle b:vared
  clear
  print -nPr "%F{2}"
  print -f "%s" "$(figlet wutag)"
  print -Pr "%f"
  printf "=%.0s" {1..22}
  print
  vared -cp "Add tag: " tag
  for x in $fx; do
    fname="${x:t}"; fdir="${x:h}"
    wutag -d "${fdir}/" set $fname $tag
  done
}}

# -- Tag: wutag remove
cmd wutag-remove ${{
  zmodload -Fa zsh/zle b:vared
  clear
  print -nPr "%F{2}"
  print -f "%s" "$(figlet wutag)"
  print -Pr "%f"
  printf "=%.0s" {1..22}
  print
  vared -cp "Remove tag: " tag
  for x in $fx; do
    fname="${x:t}"; fdir="${x:h}"
    wutag -d "${fdir}/" rm $fname
  done
}}

cmd wutag-list !{{
  clear
  noglob wutag --color=always list files -tf | bat -f
}}
# ]]] === TAGS ===

# lfrc https://github.com/gokcehan/lf/issues/579#issuecomment-1015633229
cmd fzf-restore ${{
  ids="$(echo -ne '\n'              | \
    trash-restore                   | \
    awk '$1 ~ /^[0-9]+/ {print $0}' | \
    fzf --multi                     | \
    awk '{print $1}'                | \
    sed -z 's/\n/,/g;s/,$/\n/')"
  echo $ids | trash-restore
  clear
}}

map U fzf-restore

# TODO: read https://github.com/gokcehan/lf/wiki/Tips and customize
# Also http://0x0.st/ is mentioned in the tips which is opensource and can be self hosted

cmd tag-clear :tag; tag-toggle

cmd recol ${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 145 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

map <backspace2> :updir

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}
map gL follow_link


# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}
map P :link

# TODO: auto resize https://stackoverflow.com/a/15527022
# cmd recol-init &{{
    # check_terminal_size () {
        # echo BOOO; sleep 10;
        # if [[ "$LINES $COLUMNS" != "$previous_lines $previous_columns" ]]; then
            # echo recol: $LINES, $COLUMNS >> ~/.recol
        # fi
        # previous_lines=$LINES
        # previous_columns=$COLUMNS
    # }
    # PROMPT_COMMAND="check_terminal_size; $PROMPT_COMMAND"
    # # trap 'check_terminal_size' WINCH
# }}

# :recol-init
:recol
map <c-r> :recol :reload

# TODO conflicts with my awesome wallpaper config for next wallpaper
# map <a-n> newfold

cmd newfold ${{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

# map e :tmux_nvim_edit
map e $$EDITOR "$f"
map <enter> $bash -c "nvim \"$f\""
map <c-q> quit

cmd yadm_lazyconf ${{
    yadm add $fx
    lazygit -ucd ~/.local/share/yadm/lazygit -w ~ -g ~/.local/share/yadm/repo.git
}}

#map m doc
#cmd doc $lf -doc | bat

# bat has a config file at ~/.config/bat/config which allows default cli options
map i $bash -c ~/.config/lf/bat_inspec.sh
# set previewer ~/.config/lf/bat.sh

set hiddenfiles oohyeahbaby

# https://github.com/gokcehan/lf/wiki/Integrations#fzf
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump

# https://github.com/gokcehan/lf/wiki/Integrations#ripgrep
cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search

# https://github.com/gokcehan/lf/wiki/Integrations#zsh-file-picker--directory-changer
cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map z zle-cd
    map a zle-insert-relative
    map A zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"

# https://github.com/gokcehan/lf/issues/873#issuecomment-1186223702
set ifs "\n"
cmd trash %{{
    for f in $fx; do
        trash-put "$f"
    done
}}
map <delete> :trash

cmd telesplit ${{
    for f in $fx; do
        echo 7z a -v2000m "$f.7z" "$f"
        #echo 7z a -v2000m -mx=0 "$f.7z" "$f"
        7z a -v2000m "$f.7z" "$f"
        #7z a -v2000m -mx=0 "$f.7z" "$f"
    done
}}


map <c-z> $ kill -STOP $PPID
