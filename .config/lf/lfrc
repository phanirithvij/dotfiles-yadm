# cmd tmux_micro_edit ${{
	# $micro "$f"
# }}
# set nopreview
# set ratios 1
# set info size:time

# set drawbox

# TODO: read https://github.com/gokcehan/lf/wiki/Tips and customize
# Also http://0x0.st/ is mentioned in the tips which is opensource and can be self hosted

cmd recol ${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 145 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

# TODO: auto resize https://stackoverflow.com/a/15527022
# cmd recol-init &{{
    # check_terminal_size () {
        # echo BOOO; sleep 10;
        # if [[ "$LINES $COLUMNS" != "$previous_lines $previous_columns" ]]; then
            # echo recol: $LINES, $COLUMNS >> ~/.recol
        # fi
        # previous_lines=$LINES
        # previous_columns=$COLUMNS
    # }
    # PROMPT_COMMAND="check_terminal_size; $PROMPT_COMMAND"
    # # trap 'check_terminal_size' WINCH
# }}

# :recol-init
:recol
map <c-r> :recol :reload

# TODO conflicts with my awesome wallpaper config for next wallpaper
# map <a-n> newfold

cmd newfold ${{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

# map e :tmux_micro_edit
map e $micro "$f"
map <enter> $bash -c "micro \"$f\""
map <c-q> quit

cmd yadm_lazyconf ${{
    yadm add $fx
    lazygit -ucd ~/.local/share/yadm/lazygit -w ~ -g ~/.local/share/yadm/repo.git
}}

map m doc
cmd doc $lf -doc | bat

# bat has a config file at ~/.config/bat/config which allows default cli options
map i $bash -c ~/.config/lf/bat_inspec.sh
set previewer ~/.config/lf/bat.sh

set hiddenfiles oohyeahbaby

# https://github.com/gokcehan/lf/wiki/Integrations#fzf
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump

# https://github.com/gokcehan/lf/wiki/Integrations#ripgrep
cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search

# https://github.com/gokcehan/lf/wiki/Integrations#zsh-file-picker--directory-changer
cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map z zle-cd
    map a zle-insert-relative
    map A zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"

cmd trash %trash-put $fx
map <delete> :trash
